In spring based applications, objects live in the Spring container.
The container configures them, wires them together and manages their complete lifecycle.

Categories of spring container:
-Bean factories: Provide just simple DI support
-ApplicationContext: Based on the Bean Factories concept, they provide more application-framework services.

Application contexts are more commonly used.
Example of application contexts:

-AnnotationConfigApplicationContext: Loads a Spring application context from one or more Java-based configuration classes
-AnnotationConfigWebApplicationContext: Loads a Spring web application context from one or more Java-based configuration classes
-ClassPathXmlApplicationContext: Loads a context definition from one or more XML files located in the classpath, treating context-definition files as classpath resources
-FileSystemXmlApplicationContext: Loads a context definition from one or more XML files in the filesystem
-XmlWebApplicationContext: Loads context definitions from one or more XML files contained in a web application


Spring Bean Life Cycle
-----------------------
1 Spring instantiates the bean.
2 Spring injects values and bean references into the bean’s properties.
3 If the bean implements BeanNameAware, Spring passes the bean’s ID to the setBeanName() method.
4 If the bean implements BeanFactoryAware, Spring calls the setBeanFactory() method, passing in the bean factory itself.
5 If the bean implements ApplicationContextAware, Spring calls the setApplicationContext() method, passing in a reference to the enclosing application context.
6 If the bean implements the BeanPostProcessor interface, Spring calls its postProcessBeforeInitialization() method.
7 If the bean implements the InitializingBean interface, Spring calls its afterPropertiesSet() method. Similarly, if the bean was declared with an initmethod, then the specified initialization method is called.
8 If the bean implements BeanPostProcessor, Spring calls its postProcessAfterInitialization() method.
9 At this point, the bean is ready to be used by the application and remains in the application context until the application context is destroyed.
10 If the bean implements the DisposableBean interface, Spring calls its destroy() method. Likewise, if the bean was declared with a destroy-method, the specified method is called.


Spring Bean wiring mechanisms
------------------------------
-Configuration in xml
-Configuration in java
-Implicit bean discovery an automatic wiring

It is matter of taste which wiring mechanism you choose. The java one is refactor friendly and also type-safe.
The automatic scanning is an easy way of doing it using annotations like @Component and @Autowired, but sometimes if we want to wire thirdparty libraries then we cannot
use auto scannong(we cannot annotate code that we don't own), then it is desirable to pick either Java or Xml.
Important to mention, that all this types of wiring can be conbined, we can wire some beans in some way, and anothers in another way.


Types of Spring Bean Scopes
----------------------------
	-Singleton
	-Prototype
	-Session
	-Request

Usage example:

@Bean
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)